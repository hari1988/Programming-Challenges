//A program to find the longest common subsequence between two strings.
//A subsequence doesn't have to be consecutive
//Uses dynamic programming
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class lcs
{
	public static void main(String args[])throws IOException
	{
	    lcs o=new lcs();
		BufferedReader br=new BufferedReader(new FileReader(args[0]));
		String str="";
		while((str=br.readLine())!=null)
		{
			if(str.trim().length()!=0)
			{
				String[] t=str.split(";");
				String a=" "+t[0];
				String b=" "+t[1];
				String[][] m=new String[a.length()][b.length()];
				for(int i=0;i<a.length();i++)
					m[i][0]="";
				for(int j=0;j<b.length();j++)
					m[0][j]="";
				for(int i=1;i<a.length();i++)
				{
					for(int j=1;j<b.length();j++)
					{
						if(a.charAt(i)==b.charAt(j))
						{
							m[i][j]=m[i-1][j-1]+a.substring(i,i+1);
						}
						else
						{
							m[i][j]=o.max(m[i][j-1],m[i-1][j]);
						}
					}
				}
				System.out.println(m[a.length()-1][b.length()-1].trim());
			}
		}
		System.exit(0);
	}
	String max(String a,String b)
	{
		if(a.length()>b.length())return a;
		else return b;
	}
}
